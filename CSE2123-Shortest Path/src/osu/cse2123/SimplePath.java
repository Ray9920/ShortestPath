package osu.cse2123;
/**
 * Path
 * 
 *   A simple method for tracking Paths in an adjacency list.
 *   
 *   @author Ryan Khalili
 *   @version 12/12/2022
 */
public class SimplePath implements Comparable<SimplePath>, Path {


	/**
	 * Declaring private member variables as final so that
	 * they cannot be changed - they are immutable once they've
	 * been assigned in the constructor.
	 */

	private final String endpoint;
	private final Double cost;


	/**
	 * Two argument constructor - creates a SimplePath object
	 * using supplied endpoint and cost values
	 * @param nodename the name of the endpoint
	 * @param cost the value of the cost for the path
	 * @postcond playlist object is empty
	 */	
	public SimplePath(String nodename, double cost) {
		//Setting my variables to the associated values
		this.endpoint = nodename;
		this.cost = cost;
	}

	@Override
	public String getEndpoint() {
		//getting the endpoint
		return this.endpoint;
	}

	@Override
	public double getCost() {
		//Getting the double cost
		return this.cost;
	}


	/**
	 *   Paths are ordered by their cost.  Return a positive
	 *   value if our cost is greater than the one we're comparing
	 *   to, a negative cost if it's less than, and 0 when they
	 *   are actually equal.
	 *   
	 * @see java.lang.Comparable#compareTo(java.lang.Object)
	 */

	@Override
	public int compareTo(SimplePath other) {
		//Created the compareTo method

		//if cost is greater then the cost were comparing return a positive number
		if(this.cost > other.getCost()) {
			return 1;
		}
		//if cost is least then the cost were comparing to then return a negative number
		else if(this.cost < other.getCost()) {
			return -1;
		}
		//Anything else is zero
		else {
			return 0;
		}
	}

	/**
	 * Prints contents of path object in the form of '(endpoint:cost)'
	 * @see java.lang.Object#toString()
	 */
	@Override
	public String toString() {

		//The toString method that will return string the way we want it to printed
		return "(" + endpoint + ":" + cost + ")";
	}

	/**
	 * This is the autogenerated hashCode method from eclipse
	 * (non-Javadoc)
	 * @see java.lang.Object#hashCode()
	 */
	@Override
	public int hashCode() {

		//The hashCode method 
		final int prime = 31;
		int result = 1;
		result = prime * result + ((cost == null) ? 0 : cost.hashCode());
		result = prime * result + ((endpoint == null) ? 0 : endpoint.hashCode());
		return result;
	}

	/**
	 * Two paths are equal when their endpoint is the same and
	 * they have the same cost.
	 * (non-Javadoc)
	 * @see java.lang.Object#equals(java.lang.Object)
	 */
	@Override
	public boolean equals(Object obj) {

		//The equals method
		boolean areEqual = false;
		if (obj == this) {
			areEqual = true;
		}
		else if(obj instanceof SimplePath) {
			SimplePath localOther = (SimplePath) obj;
			//Checking if endpoint and cost equals the other endpoint and cost
			areEqual = this.endpoint.equals(localOther.endpoint) && this.cost.equals(localOther.cost);
		}
		return areEqual;
	}
}